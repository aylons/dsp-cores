This is the latest (and greatest!) in a long series of fully-unrolled
CORDIC processors written by Larry Doolittle, with occasional help
from Ming Choy and Gang Huang.  It is written in Verilog, although
part of the Verilog is in turn composed by an Octave/Matlab program.

Semi-incompatible change since the last version (24): the op parameter
is two bits instead of one.  Just pad on the left with zero (as will be
performed by default in Verilog), and there will be no change in function.
The new bit enables slave mode, where the rotation phase is the negative
of the previous operation.  For such cycles, the input phase is ignored.
The hardware required to implement this new mode is small, about one logic
cell per stage, and even that should be stripped away by the synthesizer
if op[1] is hard wired to zero.  Slave mode's computation could be also
performed by two successive passes through the cordic engine; using slave
mode saves a factor of two in latency, and reduces round-off error.

Incompatible change between versions 23 and 24: the phase of the
rectangular to polar conversion has been changed by pi.  That means
that when op==1, the angle output is truly atan2(y,x), and the x (R)
output in that mode is now positive.

The other new feature of version 24, besides an additional test
bench mode, is the parameter op_def.  Use cases with constant op
input can set this parameter to match, and might save some gates
and/or timing when synthesizing for Xilinx.

Good reference material on CORDIC hardware is given by Ray Andraka at
  http://www.fpga-guru.com/cordic.htm

The test platform is Icarus Verilog, Xilinx XST, and Octave,
using Debian GNU/Linux as the operating system.  The code is
generally standards-based and not version-specific.

The module cordicg (in cordicg.v) is ready for instantiation in
application code.  Since the number of pipeline stages is configurable,
it is a little tricky to make that application code adjust to
the possible configurations.  The cordicg.vh file is set up to
help that process.  One possible solution:

`include "cordicg.vh"   // sets cordic_delay parameter
reg [cordic_delay:0] sync_chain=0;
always @(posedge clk) sync_chain <= {sync_chain[cordic_delay-1:0],in_sync};
wire out_sync = sync_chain[cordic_delay];

The code has three configuration settings:

In cordicg_tb.v:
parameter width=18;           //   Configure here!

In cordicg_conf.m:
o=22;  % bit width of intermediate computations
s=20;  % number of stages

As shipped, results are:

octave -q cordicgx.m > cordicg.vh
iverilog -Wall  -o cordicg_tb cordicg_tb.v cordicg.v
vvp -n cordicg_tb +op=0 > cordic0.dat

Check of x,y,theta->x,y
gawk -f cordic_test.awk cordic0.dat
test covers 15958 points, maximum amplitude is 90325 counts
peak error   1.25 bits, 0.0010 %
rms  error   0.36 bits, 0.0003 %
PASS
vvp -n cordicg_tb +op=1 > cordic1.dat

Check of x,y,theta->r,theta
gawk -f cordic_test.awk cordic1.dat
test covers 7979 points, maximum amplitude is 129001 counts
peak error   1.06 bits, 0.0008 %
rms  error   0.36 bits, 0.0003 %
PASS
vvp -n cordicg_tb +rmix=1 > cordic2.dat

Check of downconversion bias
gawk -f cordic2_test.awk cordic2.dat
test covers 6102 points
averages 0.027 -0.007
PASS
vvp -n cordicg_tb +op=3 > cordic3.dat

Check of slave mode
gawk -f cordic_test.awk cordic3.dat
test covers 11968 points, maximum amplitude is 129001 counts
peak error   3.27 bits, 0.0025 %
rms  error   0.41 bits, 0.0003 %
PASS


Note that the theoretical lower limit for peak error is 0.5, and for
rms error is 1/sqrt(12) = 0.29.  More information about the accuracy
behavior is given in a plot you can create with the gnuplot command
   load "perf.gp"

Happy computing!

Larry Doolittle  <ldoolitt@recycle.lbl.gov>   November 27, 2012
